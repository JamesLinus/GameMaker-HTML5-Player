/*
 * Copyright (c) 2011-12 piluke <pikingqwerty@gmail.com>
 * Copyright (c) 2011-12 jimn346 <jds9496@gmail.com>
 * You can find the GitHub repository at https://github.com/piluke/GameMaker-HTML5-Player
 *
 * This file is part of GameMaker HTML5 Player (GHP).
 * GHP is free software and comes with ABSOLUTELY NO WARANTY.
 * See LICENSE for more details.
 */
function eventGameStart() {
	canvas.style.background = cLtgray;
}

function eventGameEnd() {
	eventRoomEnd();
}

function eventRoomStart() {
	objRoomStart();
}

function eventRoomChange() {
	eventRoomEnd();
	eventInstCrCode();
	eventCreate();
	eventRoomCrCode();
	eventRoomStart();
}

function eventRoomEnd() {
	objRoomEnd();
}

function eventInstCrCode() {

}

function eventRoomCrCode() {

}

function eventCreate() {

}

function eventDraw() {
	clearDraw();
	requestAnimFrame();
	var foregrounds = new Array();
	for (var b = 0; b < resource[8][room].backgrounds.length; b++) {
		if (resource[8][room].backgrounds[b] == undefined || resource[8][room].backgrounds[b] == null)
			continue;
		
		if (resource[8][room].backgrounds[b].fore) {
			foregrounds.push(resource[8][room].backgrounds[b]);
			continue;
		}
		
		if (resource[8][room].backgrounds[b].vis) {
			var w = resource[8][room].backgrounds[b].bkg.width;
			var h = resource[8][room].backgrounds[b].bkg.height;
			
			if (resource[8][room].backgrounds[b].stretch) {
				w = resource[8][room].width;
				h = resource[8][room].height;
			}
			
			var x, y, endX, endY;
			if (resource[8][room].backgrounds[b].tileH) {
				x = resource[8][room].backgrounds[b].x % w;
				if (x > 0) x -= w;
				endX = canvas.width;
			}
			else {
				x = resource[8][room].backgrounds[b].x;
				endX = x + w;
			}
			
			if (resource[8][room].backgrounds[b].tileV) {
				y = resource[8][room].backgrounds[b].y % h;
				if (y > 0) y -= h;
				endY = canvas.height;
			}
			else {
				y = resource[8][room].backgrounds[b].y;
				endY = y + h;
			}
			
			for (var xx = x; xx < endX; xx += w)
				for (var yy = y; yy < endY; yy += h)
					context.drawImage(resource[8][room].backgrounds[b].bkg, xx, yy, w, h);
		}
		
		resource[8][room].backgrounds[b].x += resource[8][room].backgrounds[b].hsp;
		resource[8][room].backgrounds[b].y += resource[8][room].backgrounds[b].vsp;
	}
	
	var drawList = glin.concat(systems).concat(tiles);
	drawList.sort(sortDepth);
	for (var g = 0; g < drawList.length; g++) {
		if (drawList[g] == null)
			break;
		
		if (drawList[g] instanceof ParticleSystem) {
			if (drawList[g].autoDraw)
				partSystemDrawit(drawList[g]);
		} else if (drawList[g] instanceof Tile) {
			if (drawList[g].visible)
				drawBackgroundPartExt(drawList[g].bkg, drawList[g].left, drawList[g].top, drawList[g].width, drawList[g].height, drawList[g].x, drawList[g].y, drawList[g].xscale, drawList[g].yscale, drawList[g].blend, drawList[g].alpha);
		} else if (drawList[g]["visible"])
			drawList[g]["objectIndex"].Draw(drawList[g]["objectIndex"].id.indexOf(drawList[g]));
	}

	for (var b = 0; b < foregrounds.length; b++) {
		if (foregrounds[b].vis) {
			var w = foregrounds[b].bkg.width;
			var h = foregrounds[b].bkg.height;
			
			if (foregrounds[b].stretch) {
				w = resource[8][room].width;
				h = resource[8][room].height;
			}
			
			var x, y, endX, endY;
			if (foregrounds[b].tileH) {
				x = foregrounds[b].x % w;
				if (x > 0) x -= w;
				endX = canvas.width;
			}
			else {
				x = foregrounds[b].x;
				endX = x + w;
			}
			
			if (foregrounds[b].tileV) {
				y = foregrounds[b].y % h;
				if (y > 0) y -= h;
				endY = canvas.height;
			}
			else {
				y = foregrounds[b].y;
				endY = y + h;
			}
			
			for (var xx = x; xx < endX; xx += w)
				for (var yy = y; yy < endY; yy += h)
					context.drawImage(foregrounds[b].bkg, xx, yy, w, h);
		}
		
		foregrounds[b].x += foregrounds[b].hsp;
		foregrounds[b].y += foregrounds[b].vsp;
	}
	
	drawLinks();
	
	if (cursorSprite >= 0)
		drawSprite(cursorSprite, 0, mouseX, mouseY);
}

function eventStepBegin() {
	objBeginStep();
}

function eventStep() {
	for (var i = 0; i < glin.length; i++) {
		if (glin[i] == null)
			continue;

		if ((glin[i]["gravity"] !== undefined) && (glin[i]["gravity_direction"] !== undefined))
			motionAdd(glin[i]["glin"], glin[i]["gravity_direction"], glin[i]["gravity"]);

		if ((isDefined(glin[i]["speed"])) && (isDefined(glin[i]["direction"])))
			rayPoint(glin[i]["glin"], glin[i]["direction"], glin[i]["speed"]);

		if (resource[0][glin[i]["sprite"]] == undefined || resource[0][glin[i]["sprite"]] == null)
			glin[i]["imgIndex"] = 0;
		else {
			var n = resource[0][glin[i]["sprite"]].numb;
			glin[i]["imgIndex"] = (glin[i]["imgIndex"] + glin[i]["imgSpeed"]) % n;
			while (glin[i]["imgIndex"] < 0)
				glin[i]["imgIndex"] += n;
		}
	}
	objStep();

	//Update particle systems.
	if (systems.length > 0)
		for (var g = 0; g < systems.length; g++)
			if (systems[g].autoUpdate)
				partSystemUpdate(systems[g]);

	rkey = new Array();
	mReleased = new Array(false, false, false);
	mPressed = new Array(false, false, false);
}

function eventStepEnd() {
	objEndStep();
}

function eventAlarm() {

}

function eventKeyboard(key) {
	if (document.activeElement != canvas)
		return;

	if (key != undefined)
		if (key in keys)
			return keys[key];
		else
			return 0;
		else //Called as event, not function
			for (var i = 0; i < 125; i++)
				if (keys[i] == 1)
					objKeys(i);
}

function eventKeyboardPress(e) {
	if (document.activeElement != canvas)
		return;

	if (e != undefined)
	//Any key
		keys[e.keyCode] = 1;
	else {
		//No key
	}
	for (var i = 0; i < 125; i++)
		if (pkey[i] != keys[i]) {
			objKeyP(i);
			pkey[i] = keys[i];
		}
}

function eventKeyboardRelease(e) {
	if (document.activeElement != canvas)
		return;

	if (e != undefined) {
		//Any key
		keys[e.keyCode] = 0;
		rkey[e.keyCode] = 1;
	} else {
		//No key
	}
	for (var i = 0; i < 125; i++)
		if (pkey[i] != keys[i])
		//Call KeyboardReleases
			pkey[i] = keys[i];
}

function eventPathEnd() {

}

function eventOutsideRoom() {

}

function eventIntersectBoundary() {

}

function eventCollision(obj1, obj2) {
	/*if ((obj1 != undefined)&&(obj2 != undefined))
  {
    x1 = obj1["x"];
	y1 = obj1["y"];
	width1 = obj1["width"];
	height1 = obj1["height"];
	if ((width1 == undefined)||(width1 == 0)||(height1 ==  undefined)||(height1 == 0))
	{
	  return false;
	}
	for (var i=0;i<obj2.id.length;i++)
	{
	  x2 = obj2.id[i]["x"];
	  y2 = obj2.id[i]["y"];
	  width2 = obj2.id[i]["width"];
	  height2 = obj2.id[i]["height"];
	  if ((x2 >= x1)&&(x2 <= x1+width1)&&(y2 >= y1)&&(y2 <= y1+height1))
      {
		return true;
	  }
	  else if ((x2+width2 >= x1)&&(x2+width2 <= x1+width1)&&(y2+height2 >= y1)&&(y2+height2 <= y1+height1))
	  {
	    return true;
	  }
	  //else if ((x2)&&())
	  {
	    //return true;
	  }
	}
	return false;
  }
  else //Called as event, not function
  {
    
  }*/
}

function eventAnimationEnd() {

}

function eventUserDefined(define) {

}

function eventNoHealth() {

}

function eventNoLives() {

}

function eventDestroy() {

}

function eventMouse(e) {
	if (document.activeElement != canvas)
		return;

	if (e != undefined)
		switch (e.button) {
			case 0: objLeftButton();
				objGlobalLeftButton();
				break;
				
			case 1: objMiddleButton();
				objGlobalMiddleButton();
				break;
				
			case 2: objRightButton();
				objGlobalRightButton();
		}
}

function eventMousePress(e) {
	if (document.activeElement != canvas)
		return;

	if (e != undefined)
		mButton[e.button] = true;
		mPressed[e.button] = true;
		switch (e.button) {
			case 0: objLeftPressed();
				objGlobalLeftPressed();
				break;
				
			case 1: objMiddlePressed();
				objGlobalMiddlePressed();
				break;
				
			case 2: objRightPressed();
				objGlobalRightPressed();
		}
}

function eventMouseRelease(e) {
	if (document.activeElement != canvas)
		return;

	if (e != undefined) {
	//Do links
		if (links.length > 0)
			for (var i = 0; i < links.length; i++)
				if ((mouseX >= links[i][2]) && (mouseY >= links[i][3]) && (mouseX <= links[i][2] + links[i][4]) && (mouseY <= links[i][3] + links[i][5]))
					if (links[i][1] !== undefined)
						links[i][0](links[i][1]);
					else
						eval(links[i][0]);
						
		mButton[e.button] = false;
		mReleased[e.button] = true;
		switch (e.button) {
			case 0: objLeftReleased();
				objGlobalLeftReleased();
				break;
				
			case 1: objMiddleReleased();
				objGlobalMiddleReleased();
				break;
				
			case 2: objRightReleased();
				objGlobalRightReleased();
		}
	}
}

function eventMouseMove(e) {
	if (e != undefined) {
		mouseX = e.pageX - canvas.offsetLeft;
		mouseY = e.pageY - canvas.offsetTop;
	}
}

function eventCleanup() {
	for (var i = 0; i < glin.length; i++) {
		if (glin[i] == null)
			continue;

		/*if ((glin[i]["xprevious"] !== undefined)&&(glin[i]["yprevious"] !== undefined))
		{
			glin[i]["direction"] = pointDirection(glin[i]["x"], glin[i]["y"], glin[i]["xprevious"], glin[i]["yprevious"]);
			glin[i]["speed"] = pointDistance(glin[i]["x"], glin[i]["y"], glin[i]["xprevious"], glin[i]["yprevious"]);
			glin[i]["hspeed"] = lengthdirX(glin[i]["speed"], glin[i]["direction"]);
			glin[i]["vspeed"] = lengthdirY(glin[i]["speed"], glin[i]["direction"]);
			glin[i]["xprevious"] = glin[i]["x"];
			glin[i]["yprevious"] = glin[i]["y"];
		}
		else //Fix
		{
			glin[i]["xprevious"] = glin[i]["x"];
			glin[i]["yprevious"] = glin[i]["y"];
		}
		if ((glin[i]["friction"] !== undefined)&&(glin[i]["speed"] !== undefined))
			glin[i]["speed"] -= glin[i]["friction"];*/
	}
}