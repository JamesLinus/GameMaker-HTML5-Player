;
var cfps = 0;
var tfps = fps;
var fnd = new Date().getSeconds();
var fod = fnd;

var room = 0;
var roomWidth = canvas.width;
var roomHeight = canvas.height;

var globalFont = fontAdd("Arial", 12, false, false);
var links = new Array();

//For keyboard functions
var keys = new Array();
var pkey = new Array();
var rkey = new Array();

//For mouse functions
var mButton   = new Array(false, false, false);
var mPressed  = new Array(false, false, false);
var mReleased = new Array(false, false, false);

var cursorSprite = -1;

var sounds = new Array();
var volume = 1;

var glin = new Array();

var tiles = new Array();

var global = new Array();

var resource = new Array();
resource[0] = new Array(); //Sprites
resource[1] = new Array(); //Sounds
resource[2] = new Array(); //Backgrounds
resource[3] = new Array(); //Fonts
resource[4] = new Array(); //Paths
resource[5] = new Array(); //Scripts
resource[6] = new Array(); //Timelines
resource[7] = new Array(); //Objects
resource[8] = new Array(); //Rooms

//Colors
var cAqua    = "#00FFFF";
var cBlack   = "#000000";
var cBlue    = "#0000FF";
var cDkgray  = "#404040";
var cFuchsia = "#FF00FF";
var cGray    = "#808080";
var cGreen   = "#008000";
var cLime    = "#00FF00";
var cLtgray  = "#C0C0C0";
var cMaroon  = "#800000";
var cNavy    = "#000080";
var cOlive   = "#808000";
var cOrange  = "#FFA000";
var cPurple  = "#800080";
var cRed     = "#FF0000";
var cSilver  = "#C0C0C0";
var cTeal    = "#008080";
var cWhite   = "#FFFFFF";
var cYellow  = "#FFFF00";

//Keys
var vkNokey       = undefined;
var vkAnykey      =   0;
var vkLeft        =  37;
var vkRight       =  39;
var vkUp          =  38;
var vkDown        =  40;
var vkEnter       =  13;
var vkEscape      =  27;
var vkShift       =  16;
var vkControl     =  17;
var vkAlt         =  18;
var vkBackspace   =   8;
var vkTab         =   9;
var vkHome        =  36;
var vkEnd         =  35;
var vkDelete      =  46;
var vkInsert      =  45;
var vkPageup      =  33;
var vkPagedown    =  34;
var vkPause       =  19;
var vkPrintscreen =  44;
var vkF1          = 112;
var vkF2          = 113;
var vkF3          = 114;
var vkF4          = 115;
var vkF5          = 116;
var vkF6          = 117;
var vkF7          = 118;
var vkF8          = 119;
var vkF9          = 120;
var vkF10         = 121;
var vkF11         = 122;
var vkF12         = 123;
var vkNumpad0     =  96;
var vkNumpad1     =  97;
var vkNumpad2     =  98;
var vkNumpad3     =  99;
var vkNumpad4     = 100;
var vkNumpad5     = 101;
var vkNumpad6     = 102;
var vkNumpad7     = 103;
var vkNumpad8     = 104;
var vkNumpad9     = 105;
var vkMultiply    = 106;
var vkDivide      = 111;
var vkAdd         = 107;
var vkSubtract    = 109;
var vkDecimal     = 110;

//Alignment
var faLeft   = "left";
var faCenter = "center";
var faRight  = "right";
var faTop    = "top";
var faMiddle = "middle";
var faBottom = "bottom";

//Mouse Buttons
var mbLeft   = 0;
var mbMiddle = 1;
var mbRight  = 2;

//Collision Shapes
var RECTANGLE = 0;
var ELLIPSE = 1;
var DIAMOND = 2;
var PRECISE = 3;

//Required functions
function fontAdd(name, size, bold, italic) {
	var temp = new Font();
	temp.style = bold + italic * 2;
	var str = "";
	
	if (temp.style == 1)
		str = "bold ";
	else if (temp.style == 2)
		str = "italic ";
	else if (temp.style == 3)
		str = "italic bold ";
	
	str += size + "pt " + name;
	temp.font = str;
	temp.name = name;
	temp.size = size;
	
	return temp;
}

function surfaceCreate(w, h) {
	this.temps = document.createElement("canvas");
	temps.setAttribute("width", w);
	temps.setAttribute("height", h);
	temps.setAttribute("style", "visibility: hidden;");
	
	return temps;
}

function fontAddSprite(spr, first, prop, sep) {
	var sprite = resource[0][spr];
	this.temp = new SpriteFont();
	temp.sprite = sprite;
	temp.start = first;
	temp.sep = sep;
	temp.prop = prop;
	
	if (prop === true) {
		temp.propx = new Array();
		temp.propwidth = new Array();
		this.minx = sprite.siwidth;
		this.maxw = 0;
		this.surf = surfaceCreate(sprite.width, sprite.height);
		this.con = surf.getContext("2d");
		con.drawImage(sprite, 0, 0);
		this.imgdata = con.getImageData(0, 0, sprite.width, sprite.height);
		for (var i = 0; i < sprite.width / sprite.siwidth; i++) {
			for (var x = 0; x < sprite.siwidth; x++)
				for (var y = 0; y < sprite.height; y++)
					if (imgdata.data[(i * sprite.siwidth + x + (y * sprite.width)) * 4 + 3] > 0)
						minx = min(minx, x);
			temp.propx[i] = minx;
			for (var x = minx + 1; x < sprite.siwidth; x++)
				for (var y = 0; y < sprite.height; y++)
					if (imgdata.data[(i * sprite.siwidth + x + (y * sprite.width)) * 4 + 3] > 0)
						maxw = max(maxw, x - minx);
			temp.propwidth[i] = maxw;
		}
	}
	return temp;
}

function Font() {
	this.font = null;
	this.name = null;
	this.size = null;
	this.style = null;
}

function SpriteFont() {
	this.sprite = null;
	this.start = null;
	this.sep = null;
	this.prop = null;

	//These two variables are used for proportional sprite fonts.
	this.propx = null;
	this.propwidth = null;
}

//Stuff to make color blending possible

function imageBlend(img, col) {
	if (local)
		return img;

	this.temp = document.createElement("canvas");
	temp.setAttribute("width", image.width);
	temp.setAttribute("height", image.height);
	temp.setAttribute("style", "visibility: hidden;");
	this.tmpctx = temp.getContext("2d");

	//Get the data for the single color
	col = col.replace("#", "");
	this.rgb = parseInt(col, 16);

	this.red = (rgb & (255 << 16)) >> 16;
	this.green = (rgb & (255 << 8)) >> 8;
	this.blue = (rgb & 255);

	//Put the image on the new canvas
	tmpctx.drawImage(img, 0, 0);
	this.imageData = tmpctx.getImageData(0, 0, temp.width, temp.height);
	this.data = imageData.data;

	//Blend the image.
	for (var i = 0; i < data.length; i += 4) {
		data[i] = Math.round(data[i] * red * (1 / 255));
		data[i + 1] = Math.round(data[i + 1] * green * (1 / 255));
		data[i + 2] = Math.round(data[i + 2] * blue * (1 / 255));
	}

	//Set the data to the canvas.
	tmpctx.putImageData(imageData, 0, 0);

	return temp;
}

///////////
//Particles
///////////

//This handles all of the systems.
var systems = new Array();

//Constants
var psDeflectHorizontal = 0;
var psDeflectVertical   = 1;

var psShapeRectangle = 0;
var psShapeEllipse   = 1;
var psShapeDiamond   = 2;
var psShapeLine      = 3;

var psDistrLinear      = 0;
var psDistrGaussian    = 1;
var psDistrInvgaussian = 2;

var psChangeMotion = 0;
var psChangeShape  = 1;
var psChangeAll    = 2;

var psForceConstant  = 0;
var psForceLinear    = 1;
var psForceQuadratic = 2;

//Shapes
ptShapePixel = new Image();
ptShapePixel.src = "particles/00_pixel.png";
ptShapePixel.colors = new Array();

ptShapeDisk = new Image();
ptShapeDisk.src = "particles/01_disk.png";
ptShapeDisk.colors = new Array();

ptShapeSquare = new Image();
ptShapeSquare.src = "particles/02_square.png";
ptShapeSquare.colors = new Array();

ptShapeLine = new Image();
ptShapeLine.src = "particles/03_line.png";
ptShapeLine.colors = new Array();

ptShapeStar = new Image();
ptShapeStar.src = "particles/04_star.png";
ptShapeStar.colors = new Array();

ptShapeCircle = new Image();
ptShapeCircle.src = "particles/05_circle.png";
ptShapeCircle.colors = new Array();

ptShapeRing = new Image();
ptShapeRing.src = "particles/06_ring.png";
ptShapeRing.colors = new Array();

ptShapeSphere = new Image();
ptShapeSphere.src = "particles/07_sphere.png";
ptShapeSphere.colors = new Array();

ptShapeFlare = new Image();
ptShapeFlare.src = "particles/08_flare.png";
ptShapeFlare.colors = new Array();

ptShapeSpark = new Image();
ptShapeSpark.src = "particles/09_spark.png";
ptShapeSpark.colors = new Array();

ptShapeExplosion = new Image();
ptShapeExplosion.src = "particles/10_explosion.png";
ptShapeExplosion.colors = new Array();

ptShapeCloud = new Image();
ptShapeCloud.src = "particles/11_cloud.png";
ptShapeCloud.colors = new Array();

ptShapeSmoke = new Image();
ptShapeSmoke.src = "particles/12_smoke.png";
ptShapeSmoke.colors = new Array();

ptShapeSnow = new Image();
ptShapeSnow.src = "particles/13_snow.png";
ptShapeSnow.colors = new Array();

function ParticleSystem() {
	this.attractors = new Array();
	this.changers   = new Array();
	this.deflectors = new Array();
	this.destroyers = new Array();
	this.emitters   = new Array();
	this.particles  = new Array();
	
	this.order = true;
	this.depth = 0;
	
	this.x = 0;
	this.y = 0;
	
	this.autoUpdate = true;
	this.autoDraw = true;
}

function ParticleAttractor() {
	this.x = 0;
	this.y = 0;
	this.dist = 0;
	this.kind = psForceConstant;
	this.additive = true;
}

function ParticleChanger() {
	this.xMin = 0;
	this.xMax = 0;
	this.yMin = 0;
	this.yMax = 0;
	this.shape = psShapeRectangle;
	this.kind = psChangeAll;
	this.type1 = null;
	this.type2 = null;
}

function ParticleDeflector() {
	this.xMin = 0;
	this.xMax = 0;
	this.yMin = 0;
	this.yMax = 0;
	this.kind = psDeflectHorizontal;
	this.friction = 0;
}

function ParticleDestroyer() {
	this.xMin = 0;
	this.xMax = 0;
	this.yMin = 0;
	this.yMax = 0;
	this.shape = spShapeRectangle;
}

function ParticleEmitter() {
	this.xMin = 0;
	this.xMax = 0;
	this.yMin = 0;
	this.yMax = 0;
	this.shape = psShapeRectangle;
	this.distribution = psDistrLinear;
	this.stream = new Array();
	this.number = new Array();
	this.count = new Array();
}

function ParticleType() {
	this.shape = ptShapePixel;
	
	this.sizeMin = 1;
	this.sizeMax = 1;
	this.sizeIncr = 0;
	this.sizeWiggle = 0;
	
	this.xscale = 1;
	this.yscale = 1;
	
	this.angMin = 0;
	this.angMax = 0;
	this.angIncr = 0;
	this.angWiggle = 0;
	this.angRelative = 0;
	
	this.color1 = cWhite;
	this.color2 = cWhite;
	this.color3 = cWhite;
	
	this.colorMix = false;
	
	this.rgb = false;
	this.rMin = 255;
	this.gMin = 255;
	this.bMin = 255;
	this.rMax = 255;
	this.gMax = 255;
	this.bMax = 255;
	
	this.hsv = false;
	this.hMin = 255;
	this.sMin = 255;
	this.vMin = 255;
	this.hMax = 255;
	this.sMax = 255;
	this.vMax = 255;
	
	this.alpha1 = 1;
	this.alpha2 = 1;
	this.alpha3 = 1;
	
	this.blend = false;
	
	this.lifeMin = 100;
	this.lifeMax = 100;
	
	this.stepNumber = 0;
	this.stepType = null;
	
	this.deathNumber = 0;
	this.deathType = null;
	
	this.speedMin = 1;
	this.speedMax = 1;
	this.speedIncr = 0;
	this.speedWiggle = 0;
	
	this.dirMin = 360;
	this.dirMax = 0;
	this.dirIncr = 0;
	this.dirWiggle = 0;
	
	this.gravAmount = 0;
	this.gravDirection = 0;
	
	this.stepType = null;
	this.stepNumber = 0;
	
	this.deathType = null;
	this.deathNumber = 0;
	
	//Only used if it is a sprite
	this.animat = false;
	this.stretch = false;
	this.rand = false;
}

function Particle() {
	this.type = null;
	this.size = null;
	this.ang = null;
	this.color = null;
	this.overcolor = false;
	this.alpha = null;
	this.life = 0;
	this.time = null;
	this.speed = null;
	this.dir = null;
	this.x = null;
	this.y = null;
	this.subimg = null;
	this.stepCount = 0;
	
	//If hit by a changer...
	this.type2 = null;
	this.chtype = null;
}

function instanceCreate(inst, x, y) {
	var i = inst.id.length;
	inst.id[i] = new inst(i, x, y);
	inst.Create(i, x, y);

	return i;
}

function RoomBackground(bkg, vis, fore, x, y, tileH, tileV, stretch, hsp, vsp) {
	this.bkg = bkg;
	this.vis = vis;
	this.fore = fore;
	this.xstart = x;
	this.ystart = y;
	this.x = x;
	this.y = y;
	this.tileH = tileH;
	this.tileV = tileV;
	this.stretch = stretch;
	this.hsp = hsp;
	this.vsp = vsp;
}

function roomOpen(i) {
	for (var b = 0; b < resource[8][i].backgrounds.length; b++) {
		resource[8][i].backgrounds[b].x = resource[8][i].backgrounds[b].xstart;
		resource[8][i].backgrounds[b].y = resource[8][i].backgrounds[b].ystart;
	}
	
	resource[8][i].rmCrCode();
	for (var e=0;e<resource[8][i].inst.length;e++)
		instanceCreate(resource[8][i].inst[e][0], resource[8][i].inst[e][1], resource[8][i].inst[e][2]);

	tiles = new Array();
	for (var e=0;e<resource[8][i].tiles.length;e++)
		tileAdd(resource[8][i].tiles[e][0], resource[8][i].tiles[e][1], resource[8][i].tiles[e][2], resource[8][i].tiles[e][3], resource[8][i].tiles[e][4], resource[8][i].tiles[e][5], resource[8][i].tiles[e][6], resource[8][i].tiles[e][7]);
	
	roomWidth = resource[8][i].width;
	roomHeight = resource[8][i].height;
}

/////////////
//Resources//
/////////////

function Sprite(fname, imgn, rmback, sm, xo, yo, l, r, t, b, s, a) {
	var img = new Image();
	img.src = fname;
	var tmp = fname.replace(/^.*[\\\/]/, "").split(".");
	tmp.pop();
	img.name = tmp.join();
	img.numb = imgn;
	img.removeback = rmback;
	img.smooth = sm;
	img.xorig = xo;
	img.yorig = yo;
	img.left = l;
	img.right = r;
	img.top = t;
	img.bottom = b;
	img.shape = s;
	img.alpha = a;
	img.onload = function () {
		this.siwidth = this.width / this.numb;
	};
	resource[0][resource[0].length] = img;
	return resource[0].length - 1;
}

function Sound(fname, kind, pre) {
	var snd = new Audio();
	snd.src = fname;
	snd.kind = kind;

	if (pre)
		snd.load();

	snd.onload = function () {
		resource[1][resource[1].length] = this;
	}
	return snd;
}

function Background(fname, rmback, sm) {
	var bck = new Image();
	bck.src = fname;
	bck.removeback = rmback;
	bck.smooth = sm;
	bck.onload = function () {
		resource[2][resource[2].length] = this;
	}
	return bck;
}

function Path() {
	var pth = new Array();
	resource[4][resource[4].length] = this;
	return pth;
}

function Timeline() {
	var tml = new Array();
	resource[6][resource[6].length] = this;
	return tml;
}

function GmObject() {
	var obj = new Array();
	resource[7][resource[7].length] = this;
	return obj;
}

function Room() {
	var rm = new Array();
	resource[8][resource[8].length] = this;
	return rm;
}

function Tile(x, y, bkg, l, t, w, h, d, vis, xsc, ysc, bl, a) {
	if (x == undefined)
		x = 0;
	if (y == undefined)
		y = 0;
	if (bkg == undefined)
		bkg = null;
	if (l == undefined)
		l = 0;
	if (t == undefined)
		t = 0;
	if (w == undefined)
		w = 0;
	if (h == undefined)
		h = 0;
	if (d == undefined)
		d = 0;
	if (vis == undefined)
		vis = true;
	if (xsc == undefined)
		xsc = 1;
	if (ysc == undefined)
		ysc = 1;
	if (bl == undefined)
		bl = cWhite;
	if (a == undefined)
		a = 1;
	
	this.x = x;
	this.y = y;
	this.bkg = bkg;
	this.left = l;
	this.top = t;
	this.width = w;
	this.height = h;
	this.depth = d;
	this.visible = vis;
	this.xscale = xsc;
	this.yscale = ysc;
	this.blend = bl;
	this.alpha = a;
	
	tiles.push(this);
}

function tileAdd(bkg, left, top, width, height, x, y, depth) {
	new Tile(x, y, bkg, left, top, width, height, depth);
}

